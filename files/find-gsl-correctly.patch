--- a/cmake/FindGSL.cmake
+++ b/cmake/FindGSL.cmake
@@ -71,24 +71,29 @@ ELSE(WIN32)
           )
       # MESSAGE("DBG GSL_CONFIG ${GSL_CONFIG}")
 
-      IF (GSL_CONFIG) 
+      FIND_PACKAGE(PkgConfig)
+
+      PKG_CHECK_MODULES(GSL gsl QUIET)
+
+      IF (GSL_FOUND)
+        SET(GSL_CXX_FLAGS "${GSL_CFLAGS}")
+        SET(GSL_LINK_DIRECTORIES "${GSL_LIBRARY_DIRS}")
+        SET(GSL_INCLUDE_DIR "${GSL_INCLUDEDIR}")
+      ELSEIF (GSL_CONFIG)
         # set CXXFLAGS to be fed into CXX_FLAGS by the user:
         SET(GSL_CXX_FLAGS "`${GSL_CONFIG} --cflags`")
       
         # set INCLUDE_DIRS to prefix+include
-        EXEC_PROGRAM(${GSL_CONFIG}
-            ARGS --prefix
+        EXECUTE_PROCESS(COMMAND ${GSL_CONFIG} --prefix
             OUTPUT_VARIABLE GSL_PREFIX)
         SET(GSL_INCLUDE_DIR ${GSL_PREFIX}/include CACHE STRING INTERNAL)
 
         # set link libraries and link flags
-        EXEC_PROGRAM(${GSL_CONFIG}
-            ARGS --libs
+        EXECUTE_PROCESS(COMMAND ${GSL_CONFIG} --libs
             OUTPUT_VARIABLE GSL_LIBRARIES)
       
         ## extract link dirs for rpath  
-        EXEC_PROGRAM(${GSL_CONFIG}
-            ARGS ${LIBS_ARG}
+        EXECUTE_PROCESS(COMMAND ${GSL_CONFIG} --libs
             OUTPUT_VARIABLE GSL_CONFIG_LIBS )
 
         ## split off the link dirs (for rpath)
@@ -118,9 +123,9 @@ ELSE(WIN32)
             GSL_DEFINITIONS
         )
       
-      ELSE(GSL_CONFIG)
+      ELSE()
         MESSAGE(FATAL_ERROR "FindGSL.cmake: gsl-config not found. Please install the libgsl development libraries or set the path with -DGSL_CONFIG=/path/to/gsl-config.")
-      ENDIF(GSL_CONFIG)
+      ENDIF()
     ENDIF (NOT GSL_INCLUDE_DIR OR NOT GSL_LIBRARIES OR NOT GSL_CONFIG)
   ENDIF(UNIX)
 ENDIF(WIN32)

